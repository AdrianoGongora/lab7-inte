services:
  vote:
    build: 
      context: ./vote
      target: dev
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
    healthcheck: 
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 10s
    volumes:
     - ./vote:/usr/local/app
    ports:
      - "5000:80"

  redis:
    build:
      context: ./redis
      dockerfile: Dockerfile
    healthcheck:
      test: /usr/local/bin/redis-healthcheck.sh
      interval: 5s
    ports:
      - "6379:6379"
  
  db:
    build:
      context: ./postgres
      dockerfile: Dockerfile
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
    healthcheck:
      test: /usr/local/bin/postgres-healthcheck.sh
      interval: "5s"
    ports:
      - "5432:5432"

  worker:
    build:
      context: ./worker
    depends_on:
      redis:
        condition: service_healthy 
      db:
        condition: service_healthy
      kafka:
        condition: service_started

  result:
    build: ./result
    entrypoint: nodemon --inspect=0.0.0.0 server.js
    depends_on:
      db:
        condition: service_healthy 
    volumes:
      - ./result:/usr/local/app
    ports:
      - "5001:80"

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://0.0.0.0:9092 

  data:
    build:
      context: ./datamining
    depends_on:
      - mssql
    ports:
      - "8000:8000"
    environment:
      - DATABASE_HOST=mssql
      - DATABASE_NAME=MovieLens
      - DATABASE_USER=sa
      - DATABASE_PASSWORD=mssql1Ipw

  mssql:
    build:
      context: ./data
    ports:
      - 1433:1433
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=mssql1Ipw
    command: /bin/bash -c "/opt/mssql/bin/sqlservr & sleep 30 && /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'mssql1Ipw' -d master -i /var/opt/mssql/app/init.sql && tail -f /dev/null"
    volumes:
      - ./init.sql:/var/opt/mssql/app/init.sql
      - ./data:/var/opt/mssql/app/data

